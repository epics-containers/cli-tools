#!/bin/bash

# CLI Tool executor 
# 
# provides a standard set of parameters to add to call out to a CLI tool
# in another container
#
# usage:
# podarg="extra podman args" _execute IMAGE_NAME COMMAND [COMMAND_ARGS, ...]

image=${1}
shift 1
command=${1}
shift 1


# X11: to get GUI apps to work requires:
# -e DISPLAY --security-opt label=type:container_runtime_t -v /tmp/.X11-unix:/tmp/.X11-unix

# ENVIRONMENT: it would be useful to pass all environment to the sub container
# with --env-host but this is not supported by podman-remote (and would cost 
# startup time) Therefore all required env vars must be passed explicitly
# see for example ./edm

args="
-i
--rm 
--net podman
-e DISPLAY
--security-opt label=type:container_runtime_t
"

# CLI dev tools will want to see the filesystems you do work in. This is a 
# best guess at what is useful. You can add extra volumes in K8S_CLI_ARGS.
volumes="
-v=/home/$USER:/home/$USER
-v=/tmp:/tmp
-v=$(pwd):$(pwd)
-w$(pwd)
"

# set K8S_CLI_ARGS in $HOME/.bashrc_dev for extra settings
# e.g. -v=scratch:/scratch
all="${K8S_CLI_ARGS} ${args} ${volumes} ${podarg} ${image} ${command}"
name=${command}${RANDOM}

# The ctrl_c trap is because podman-server does not appear to send signals
# to the subprocess, so ^C just disconnects and leaves the container running.
# This happens with camonitor for example.
# A fix in podman is incomming https://github.com/containers/podman/pull/15131

trap ctrl_c INT
function ctrl_c() 
{
  podman rm -ft0 ${name} &> /dev/null
}

(
    if [[ -n ${EXECUTE_VERBOSE} ]] ; then 
        set -x
    fi
    podman run --name ${name} ${all} ${@}
)

